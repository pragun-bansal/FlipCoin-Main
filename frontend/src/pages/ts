// SPDX-License-Identifier: MIT
pragma solidity ^0.8.14;

import "@openzeppelin/contracts/utils/cryptography/ECDSA.sol"; // For signature verification

import "./achievement.sol";

contract RewardSystem {
    using ECDSA for bytes32;
    address public owner;
    // mapping(address => uint256) public userBalances;
    Achievement[] public achievements;

    constructor() {
        owner = msg.sender;
    }

    modifier onlyOwner() {
        require(
            msg.sender == owner,
            "Only the contract owner can call this function"
        );
        _;
    }

    function addAchievement(
        string memory title,
        string memory desc,
        int256 reward
    ) external onlyOwner {
        achievements.push(new Achievement(title, desc, reward));
    }

    function getAddress() public view returns (address) {
        return address(this);
    }

    function getBalance() public view returns (uint256) {
        return address(this).balance;
    }

    // function addToBalance(address user, uint256 amount) external payable  onlyOwner {
    //     userBalances[user] += amount;
    // }

    function claimReward(address user,uint256 rewardAmount,uint256 nonce,bytes memory signature) external {
        require(user != address(0), "Invalid user address");
        require(rewardAmount > 0, "Reward amount must be greater than 0");
        bytes32 messageHash = keccak256( abi.encodePacked(user, rewardAmount, nonce, address(this)));
        require( verifySignature(user, messageHash, signature),"Invalid signature");
        (bool callSuccess, ) = payable(user).call{value: rewardAmount}("");
        require(callSuccess, "Call failed");
        emit RewardClaimed(user, rewardAmount, nonce);
        emit RewardCredited(user, rewardAmount);
    }
    
    function withdraw() public onlyOwner{
        (bool callSuccess, ) = payable(msg.sender).call{value: address(this).balance}("");
        require(callSuccess, "Call failed");
    }

    // add function for handling batch transactions
    function handleBatch() public {

    }

    function sendTransaction(address payable recipient, uint256 amount) external {
        require(recipient != address(0), "Invalid recipient address");
        require(amount > 0, "Amount must be greater than 0");
        (bool callSuccess, ) = recipient.call{value: amount}("");
        require(callSuccess, "Ether transfer failed");
        emit EtherSent(recipient, amount);
    }

    function verifySignature(
        address signer,
        bytes32 messageHash,
        bytes memory signature
    ) internal pure returns (bool) {
        bytes32 ethSignedMessageHash = messageHash.toEthSignedMessageHash();
        address recoveredSigner = ethSignedMessageHash.recover(signature);
        return recoveredSigner == signer;
    }

    function fund() public payable {
        // require(PriceConverter.getConversionRate(msg.value) >= MINIMUM_USD, "You need to spend more ETH!");
        // userBalances[msg.sender] += msg.value;
    }

    fallback() external payable {
        fund();
    }

    receive() external payable {
        fund();
    }


    event RewardClaimed(
        address indexed user,
        uint256 rewardAmount,
        uint256 nonce
    );

    event EtherSent(address indexed recipient, uint256 amount);
    event RewardCredited(address indexed user, uint256 rewardAmount);
}
